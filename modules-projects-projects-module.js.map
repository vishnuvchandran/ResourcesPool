{"version":3,"sources":["webpack:///./src/app/modules/projects/components/iteration-add/iteration-add.component.html","webpack:///./src/app/modules/projects/components/iteration-add/iteration-add.component.scss","webpack:///./src/app/modules/projects/components/iteration-add/iteration-add.component.ts","webpack:///./src/app/modules/projects/components/iteration-edit/iteration-edit.component.html","webpack:///./src/app/modules/projects/components/iteration-edit/iteration-edit.component.scss","webpack:///./src/app/modules/projects/components/iteration-edit/iteration-edit.component.ts","webpack:///./src/app/modules/projects/components/iteration-view/iteration-view.component.html","webpack:///./src/app/modules/projects/components/iteration-view/iteration-view.component.scss","webpack:///./src/app/modules/projects/components/iteration-view/iteration-view.component.ts","webpack:///./src/app/modules/projects/components/project-add/project.add.component.html","webpack:///./src/app/modules/projects/components/project-add/project.add.component.scss","webpack:///./src/app/modules/projects/components/project-add/project.add.component.ts","webpack:///./src/app/modules/projects/components/project-detail/project-detail.component.html","webpack:///./src/app/modules/projects/components/project-detail/project-detail.component.scss","webpack:///./src/app/modules/projects/components/project-detail/project-detail.component.ts","webpack:///./src/app/modules/projects/components/project-edit/project.edit.component.html","webpack:///./src/app/modules/projects/components/project-edit/project.edit.component.scss","webpack:///./src/app/modules/projects/components/project-edit/project.edit.component.ts","webpack:///./src/app/modules/projects/components/projects.list.component.html","webpack:///./src/app/modules/projects/components/projects.list.component.scss","webpack:///./src/app/modules/projects/components/projects.list.component.ts","webpack:///./src/app/modules/projects/components/team-add/team-add.component.html","webpack:///./src/app/modules/projects/components/team-add/team-add.component.scss","webpack:///./src/app/modules/projects/components/team-add/team-add.component.ts","webpack:///./src/app/modules/projects/components/team-edit/team-edit.component.html","webpack:///./src/app/modules/projects/components/team-edit/team-edit.component.scss","webpack:///./src/app/modules/projects/components/team-edit/team-edit.component.ts","webpack:///./src/app/modules/projects/components/team-view/team-view.component.html","webpack:///./src/app/modules/projects/components/team-view/team-view.component.scss","webpack:///./src/app/modules/projects/components/team-view/team-view.component.ts","webpack:///./src/app/modules/projects/projects.module.ts","webpack:///./src/app/modules/projects/projects.routing.ts","webpack:///./src/app/modules/projects/projects.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,4vBAA4vB,qJAAqJ,oRAAoR,KAAK,uUAAuU,qJAAqJ,mcAAmc,KAAK,uYAAuY,8KAA8K,gFAAgF,gCAAgC,yTAAyT,KAAK,4VAA4V,qKAAqK,8EAA8E,gCAAgC,+SAA+S,KAAK,obAAob,gKAAgK,mWAAmW,KAAK,s8B;;;;;;;;;;;ACAh5J,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA+E;AACE;AAC/B;AACoC;AAEQ;AAS9F;IAWE,+BAAoB,WAAwB,EAAU,IAAgB,EAAU,gBAAkC;QAA9F,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QATxG,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAG3D,cAAS,GAAG,EAAE,CAAC;QACf,aAAQ,GAAG,EAAE,CAAC;QACd,sBAAiB,GAAG,EAAE,CAAC;QAEvB,uBAAkB,GAAQ,EAAE,CAAC;QAGlC,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAGD,wCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,2CAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,qBAAqB,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,SAAS,GAAG,aAAa,CAAC;QACrF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAC5C,aAAG;YACD,KAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;MAEE;IACM,2CAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,QAAQ,GAAG,uBAAuB,CAAC;QAC1F,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,aAAG;YACD,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC,CACF,CAAC;IACJ,CAAC;IAGD;;;;OAIG;IACK,wCAAQ,GAAhB,UAAiB,IAAc;QAAd,gCAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACpC;YACE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAC1D,UAAU,EAAE,IAAI,0DAAW,CACzB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,QAAQ,EAAE,IAAI,0DAAW,CACvB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAC1D,WAAW,EAAE,CAAC,EAAE,CAAC;YACjB,IAAI,EAAE,IAAI,0DAAW,CACnB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,KAAK,EAAE,IAAI,0DAAW,EAAE;SACzB,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,sCAAM,GAAb,UAAc,QAAQ;QAAtB,iBAcC;QAbC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,aAAa,CAAC;QACrE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,aAAG;YACD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,EAAE,aAAG;YACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;YACvC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC9E,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,0CAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,8CAAc,GAArB;QACE,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;QAC5C,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,YAAY,CAAC,OAAO,CAAC,UAAU,MAAM;YACnC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACnC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,MAAM;oBACjC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC5C,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC9D,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IArHQ;QAAR,2DAAK,EAAE;;0DAAc;IACZ;QAAT,4DAAM,EAAE;kCAAa,0DAAY;6DAAgC;IAFvD,qBAAqB;QANjC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;;SAG9B,CAAC;yCAaiC,0DAAW,EAAgB,+DAAU,EAA4B,0HAAgB;OAXvG,qBAAqB,CAuHjC;IAAD,4BAAC;CAAA;AAvHiC;;;;;;;;;;;;ACdlC,svBAAsvB,qJAAqJ,oRAAoR,KAAK,uUAAuU,qJAAqJ,mcAAmc,KAAK,uYAAuY,8KAA8K,gFAAgF,gCAAgC,yTAAyT,KAAK,4VAA4V,qKAAqK,8EAA8E,gCAAgC,+SAA+S,KAAK,uWAAuW,oKAAoK,4SAA4S,KAAK,0hB;;;;;;;;;;;ACA1wJ,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA+E;AACE;AAC/B;AACoC;AAEQ;AAO9F;IAYE,gCAAoB,WAAwB,EAAU,IAAgB,EAAU,gBAAkC;QAA9F,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QARxG,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAG3D,aAAQ,GAAG,EAAE,CAAC;QAEd,eAAU,GAAG,KAAK,CAAC;QACnB,uBAAkB,GAAQ,EAAE,CAAC;QAGlC,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,yCAAQ,GAAR;QACE,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,oDAAmB,GAA3B;QAAA,iBAgBC;QAfC,IAAI,wBAAwB,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAC1G,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,SAAS,CAC/C,aAAG;YACD,KAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YAC7B,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACvB,IAAI,EAAE,KAAI,CAAC,SAAS,CAAC,IAAI;gBACzB,IAAI,EAAE,KAAI,CAAC,SAAS,CAAC,IAAI;gBACzB,UAAU,EAAE,IAAI,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC;gBAC9C,QAAQ,EAAE,IAAI,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC;gBAC1C,WAAW,EAAE,KAAI,CAAC,SAAS,CAAC,WAAW;gBACvC,IAAI,EAAE,KAAI,CAAC,SAAS,CAAC,IAAI;aAC1B,CAAC,CAAC;YACH,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;MAEE;IACM,4CAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,QAAQ,GAAG,uBAAuB,CAAC;QAC1F,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,aAAG;YACD,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC,CACF,CAAC;IACJ,CAAC;IAEA;;;;MAIE;IACK,yCAAQ,GAAhB,UAAiB,IAAc;QAAd,gCAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACpC;YACE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,UAAU,EAAE,IAAI,0DAAW,CACzB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,QAAQ,EAAE,IAAI,0DAAW,CACvB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,WAAW,EAAE,CAAC,EAAE,CAAC;YACjB,IAAI,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACjD,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,uCAAM,GAAb,UAAc,QAAQ;QAAtB,iBAaC;QAZC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAC1F,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,aAAG;YACD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,EAAE,aAAG;YACJ,IAAI,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;YACvC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC9E,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,2CAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IArGQ;QAAR,2DAAK,EAAE;;2DAAc;IACb;QAAR,2DAAK,EAAE;;6DAAgB;IACd;QAAT,4DAAM,EAAE;kCAAa,0DAAY;8DAAgC;IAJvD,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAaiC,0DAAW,EAAgB,+DAAU,EAA4B,0HAAgB;OAZvG,sBAAsB,CAwGlC;IAAD,6BAAC;CAAA;AAxGkC;;;;;;;;;;;;ACZnC,8MAA8M,kBAAkB,sQAAsQ,8BAA8B,gDAAgD,4BAA4B,qEAAqE,uBAAuB,iGAAiG,0GAA0G,uBAAuB,oJAAoJ,yBAAyB,qD;;;;;;;;;;;ACA3jC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA+E;AACvB;AACN;AACoC;AAOtF;IAWE,gCAAoB,WAAwB,EAAU,IAAgB;QAAlD,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAP5D,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAI3D,eAAU,GAAG,KAAK,CAAC;QACnB,aAAQ,GAAG,EAAE,CAAC;QAGnB,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,yCAAQ,GAAR;QACE,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;MAEE;IACM,oDAAmB,GAA3B;QAAA,iBAQC;QAPC,IAAI,wBAAwB,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAC1G,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,SAAS,CAC/C,aAAG;YACD,KAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YAC7B,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;MAEE;IACM,4CAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,QAAQ,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,aAAG;YACD,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,2CAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAjDQ;QAAR,2DAAK,EAAE;;2DAAc;IACb;QAAR,2DAAK,EAAE;;6DAAgB;IACd;QAAT,4DAAM,EAAE;kCAAa,0DAAY;8DAAgC;IAJvD,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAYiC,0DAAW,EAAgB,+DAAU;OAX3D,sBAAsB,CAoDlC;IAAD,6BAAC;CAAA;AApDkC;;;;;;;;;;;;ACVnC,mvBAAmvB,qJAAqJ,kRAAkR,KAAK,iXAAiX,qJAAqJ,kRAAkR,KAAK,uYAAuY,6KAA6K,8EAA8E,gCAAgC,uTAAuT,KAAK,4VAA4V,qKAAqK,4EAA4E,gCAAgC,6SAA6S,KAAK,4WAA4W,yJAAyJ,mcAAmc,KAAK,k0C;;;;;;;;;;;ACAtwJ,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAmF;AACF;AACN;AACW;AAGQ;AAO9F;IAOE,6BACU,WAAwB,EACxB,IAAgB,EAChB,gBAAkC;QAFlC,gBAAW,GAAX,WAAW,CAAa;QACxB,SAAI,GAAJ,IAAI,CAAY;QAChB,qBAAgB,GAAhB,gBAAgB,CAAkB;QARlC,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAI3D,uBAAkB,GAAQ,EAAE,CAAC;QAMlC,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,sCAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEO,sCAAQ,GAAhB,UAAiB,IAAc;QAAd,gCAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACpC;YACE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAC1D,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAC1D,UAAU,EAAE,IAAI,0DAAW,CACzB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,QAAQ,EAAE,IAAI,0DAAW,CACvB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAC1D,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAC7D,WAAW,EAAE,CAAC,EAAE,CAAC;SAClB,CACF,CAAC;IACJ,CAAC;IAEM,oCAAM,GAAb,UAAc,QAAQ;QAAtB,iBAcC;QAbC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,aAAG;YACD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,EAAE,aAAG;YACJ,IAAI,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;YACvC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC9E,CAAC;YACH,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,wCAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAtDS;QAAT,4DAAM,EAAE;kCAAa,0DAAY;2DAAgC;IAFvD,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;yCASuB,0DAAW;YAClB,+DAAU;YACE,0HAAgB;OAVjC,mBAAmB,CA0D/B;IAAD,0BAAC;CAAA;AA1D+B;;;;;;;;;;;;ACbhC,2LAA2L,gBAAgB,shBAAshB,gBAAgB,wFAAwF,gBAAgB,2GAA2G,4BAA4B,gEAAgE,0BAA0B,qGAAqG,qBAAqB,8DAA8D,uBAAuB,0HAA0H,uBAAuB,ylCAAylC,sFAAsF,OAAO,uDAAuD,aAAa,6BAA6B,oBAAoB,6BAA6B,qBAAqB,wtDAAwtD,sFAAsF,OAAO,uDAAuD,aAAa,6BAA6B,yBAAyB,6BAA6B,uBAAuB,6BAA6B,kBAAkB,0xBAA0xB,mBAAmB,oR;;;;;;;;;;;ACAtjL,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA2H;AACzE;AACG;AACiC;AAC7B;AACqB;AACZ;AACG;AACA;AACY;AACG;AACA;AAE0B;AAO9G;IAYE,gCACU,wBAAkD,EAClD,IAAgB,EAChB,8BAA8D,EAC9D,KAAqB,EACrB,MAAc;QAJd,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,SAAI,GAAJ,IAAI,CAAY;QAChB,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QAVjB,YAAO,GAAQ,EAAE,CAAC;QAClB,eAAU,GAAG,EAAE,CAAC;QAChB,UAAK,GAAG,EAAE,CAAC;QAUhB,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnG,CAAC;IAED,yCAAQ,GAAR;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,kDAAiB,GAAzB;QAAA,iBAUC;QATC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,aAAG;YACD,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7B,CAAC,EAAE,aAAG;YACJ,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACjC,KAAI,CAAC,8BAA8B,CAAC,mBAAmB,GAAG,MAAM,CAAC;QACnE,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,oDAAmB,GAAnB,UAAoB,OAAO;QACzB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,iDAAgB,GAAvB;QACE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC;QACrC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAC1B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACK,oDAAmB,GAA3B,UAA4B,OAAO;QAAnC,iBAaC;QAZC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,yFAAoB,CAAC,CAAC;QAC1F,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,KAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,gDAAe,GAAf,UAAgB,OAAO;QACrB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACK,gDAAe,GAAvB,UAAwB,OAAO;QAA/B,iBAaC;QAZC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,6EAAgB,CAAC,CAAC;QACtF,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,KAAI,CAAC,WAAW,EAAE,CAAC;YACnB,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;MAKE;IACF,iDAAgB,GAAhB,UAAiB,OAAO,EAAE,IAAI;QAC5B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACK,iDAAgB,GAAxB,UAAyB,OAAO,EAAE,IAAI;QAAtC,iBAcC;QAbC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,gFAAiB,CAAC,CAAC;QACvF,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,KAAI,CAAC,WAAW,EAAE,CAAC;YACnB,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;MAKE;IACF,iDAAgB,GAAhB,UAAiB,OAAO,EAAE,IAAI;QAC5B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACK,iDAAgB,GAAxB,UAAyB,OAAO,EAAE,IAAI;QAAtC,iBAcC;QAbC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,gFAAiB,CAAC,CAAC;QACvF,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,KAAI,CAAC,WAAW,EAAE,CAAC;YACnB,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEA;;;;MAIE;IACH,qDAAoB,GAApB,UAAqB,OAAO;QAC1B,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACK,qDAAoB,GAA5B,UAA6B,OAAO;QAApC,iBAaC;QAZC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,4FAAqB,CAAC,CAAC;QAC3F,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,KAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,sDAAqB,GAArB,UAAsB,OAAO,EAAE,SAAS;QACtC,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACK,sDAAqB,GAA7B,UAA8B,OAAO,EAAE,SAAS;QAAhD,iBAcC;QAbC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,gGAAsB,CAAC,CAAC;QAC5F,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,KAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,uDAAsB,GAAtB,UAAuB,OAAO,EAAE,SAAS;QACvC,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACK,sDAAqB,GAA7B,UAA8B,OAAO,EAAE,SAAS;QAAhD,iBAaC;QAZC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,gGAAsB,CAAC,CAAC;QAC5F,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,iDAAgB,GAAxB;QAAA,iBAOC;QANC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,aAAG;YACD,KAAI,CAAC,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,4CAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,aAAG;YACD,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC,CACF,CAAC;IACJ,CAAC;IAtSyB;QAAzB,+DAAS,CAAC,aAAa,CAAC;kCAAuB,kEAAc;iEAAC;IAC9B;QAAhC,+DAAS,CAAC,oBAAoB,CAAC;;sEAA2B;IAE3D;QADC,+DAAS,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,8DAAgB,EAAE,CAAC;kCACxC,8DAAgB;0EAAC;IAL9B,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAcoC,sEAAwB;YAC5C,+DAAU;YACgB,yJAA8B;YACvD,8DAAc;YACb,sDAAM;OAjBb,sBAAsB,CAySlC;IAAD,6BAAC;CAAA;AAzSkC;;;;;;;;;;;;ACpBnC,qNAAqN,gBAAgB,wjBAAwjB,qJAAqJ,kRAAkR,KAAK,iXAAiX,qJAAqJ,kRAAkR,KAAK,uYAAuY,6KAA6K,8EAA8E,gCAAgC,uTAAuT,KAAK,4VAA4V,qKAAqK,4EAA4E,gCAAgC,6SAA6S,KAAK,8WAA8W,yJAAyJ,mcAAmc,KAAK,k0C;;;;;;;;;;;ACAlzJ,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA0F;AACT;AACN;AACW;AAOtF;IASE,8BACU,WAAwB,EACxB,IAAgB;QADhB,gBAAW,GAAX,WAAW,CAAa;QACxB,SAAI,GAAJ,IAAI,CAAY;QARhB,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAI3D,eAAU,GAAG,KAAK,CAAC;QACnB,uBAAkB,GAAG,EAAE,CAAC;QAK7B,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,uCAAQ,GAAR;QAAA,iBAwBC;QAvBC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,sBAAsB,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QACnE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAC7C,aAAG;YACD,IAAI,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9B,KAAI,CAAC,QAAQ,CAAC,UAAU,CACtB;gBACE,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,UAAU,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;gBAC3C,QAAQ,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;gBACvC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACjC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACrC,WAAW,EAAE,WAAW,CAAC,WAAW;aACrC,CACF,CAAC;YACF,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC,EACD,aAAG;YACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CACF,CAAC;IACJ,CAAC;IAEO,uCAAQ,GAAhB,UAAiB,IAAc;QAAd,gCAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACpC;YACE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,UAAU,EAAE,IAAI,0DAAW,CACzB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,QAAQ,EAAE,IAAI,0DAAW,CACvB,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAC1B;YACD,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACzC,WAAW,EAAE,CAAC,EAAE,CAAC;SAClB,CACF,CAAC;IACJ,CAAC;IAEM,qCAAM,GAAb,UAAc,QAAQ;QAAtB,iBAaC;QAZC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QACrD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,aAAG;YACD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,EAAE,aAAG;YACJ,IAAI,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;YACvC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC9E,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,yCAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IA5EQ;QAAR,2DAAK,EAAE;;yDAAc;IACZ;QAAT,4DAAM,EAAE;kCAAa,0DAAY;4DAAgC;IAHvD,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAWuB,0DAAW;YAClB,+DAAU;OAXf,oBAAoB,CAgFhC;IAAD,2BAAC;CAAA;AAhFgC;;;;;;;;;;;;ACVjC,8fAA8f,odAAod,0EAA0E,oEAAoE,2CAA2C,WAAW,uBAAuB,WAAW,uBAAuB,gBAAgB,uBAAuB,kBAAkB,0zBAA0zB,mBAAmB,kR;;;;;;;;;;;ACArlE,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQuB;AACoD;AACtB;AAC8B;AACT;AACG;AAC7E,qFAAqF;AAC/B;AAIqD;AAO3G;IAgBE,+BACU,wBAAkD,EAClD,IAAgB,EAChB,eAAgC,EAChC,8BAA8D;QAH9D,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,SAAI,GAAJ,IAAI,CAAY;QAChB,oBAAe,GAAf,eAAe,CAAiB;QAChC,mCAA8B,GAA9B,8BAA8B,CAAgC;QAbjE,aAAQ,GAAG,EAAE,CAAC;QAGd,eAAU,GAAQ,KAAK,CAAC;QAIxB,oBAAe,GAAG,EAAE,OAAO,EAAE,EAAE,EAAC,CAAC;QAQtC,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,wCAAQ,GAAR;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAAC,aAAa,EAAE,CAAC;QACtE,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAEO,8CAAc,GAAtB,UAAuB,IAAgB;QAAvC,iBAQC;QARsB,+BAAgB;QACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,OAAO,GAAG,IAAI,CAAC,CAAC;QACnF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC/B,aAAG;YACD,KAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5B,KAAI,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC;QACpC,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,uDAAuB,GAA9B;QACE,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAEM,gDAAgB,GAAvB;QACE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC;QACrC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAEO,qDAAqB,GAA7B;QAAA,iBAcC;QAbC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,sFAAmB,CAAC,CAAC;QACzF,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACrB,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;YACD,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,mDAAmB,GAAnB,UAAoB,OAAO;QACzB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAEO,mDAAmB,GAA3B,UAA4B,OAAO;QAAnC,iBAeC;QAdC,IAAI,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,yFAAoB,CAAC,CAAC;QAC1F,IAAI,QAAQ,GAAG,gEAAkB,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QACxG,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAChC,aAAG;YACD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACrB,KAAI,CAAC,cAAc,CAAC,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YACnD,CAAC;YACD,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,iDAAiB,GAAxB,UAAyB,KAAK,EAAE,OAAO;QACrC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,2CAAW,GAAlB,UAAmB,MAAM;QACvB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,oDAAoB,GAA3B;QACE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACK,wDAAwB,GAAhC,UAAiC,WAAmB;QAClD,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACvC,qCAAqC;YACrC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACrC,WAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC;QACD,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACI,mDAAmB,GAA1B,UAA2B,WAAW,EAAE,OAAO,EAAE,KAAK;QACpD,MAAM,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IACnD,CAAC;IA7HyB;QAAzB,+DAAS,CAAC,aAAa,CAAC;kCAAuB,kEAAc;gEAAC;IAC9B;QAAhC,+DAAS,CAAC,oBAAoB,CAAC;;qEAA2B;IAE3D;QADC,+DAAS,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,8DAAgB,EAAE,CAAC;kCACxC,8DAAgB;yEAAC;IAL9B,qBAAqB;QALjC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;;SAG9B,CAAC;yCAkBoC,sEAAwB;YAC5C,+DAAU;YACC,iEAAe;YACA,wJAA8B;OApB7D,qBAAqB,CAgIjC;IAAD,4BAAC;CAAA;AAhIiC;;;;;;;;;;;;AC1BlC,0qBAA0qB,qJAAqJ,mQAAmQ,KAAK,uyB;;;;;;;;;;;ACAvkC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA+E;AACE;AAC/B;AACoC;AAOtF;IAUE,0BAAoB,WAAwB,EAAU,IAAgB;QAAlD,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAP5D,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAG3D,cAAS,GAAG,EAAE,CAAC;QAEf,uBAAkB,GAAQ,EAAE,CAAC;QAGlC,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,mCAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,sCAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,qBAAqB,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,SAAS,GAAG,aAAa,CAAC;QACrF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAC5C,aAAG;YACD,KAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,mCAAQ,GAAhB,UAAiB,IAAc;QAAd,gCAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACpC;YACE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,WAAW,EAAE,CAAC,EAAE,CAAC;YACjB,KAAK,EAAE,IAAI,0DAAW,EAAE;SACzB,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,iCAAM,GAAb,UAAc,QAAQ;QAAtB,iBAaC;QAZC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,QAAQ,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,aAAG;YACD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,EAAE,aAAG;YACJ,IAAI,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;YACvC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC9E,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,qCAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAtEQ;QAAR,2DAAK,EAAE;;qDAAc;IACZ;QAAT,4DAAM,EAAE;kCAAa,0DAAY;wDAAgC;IAHvD,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;;SAGzB,CAAC;yCAWiC,0DAAW,EAAgB,+DAAU;OAV3D,gBAAgB,CA0E5B;IAAD,uBAAC;CAAA;AA1E4B;;;;;;;;;;;;ACV7B,oMAAoM,aAAa,8eAA8e,qJAAqJ,mQAAmQ,KAAK,wyB;;;;;;;;;;;ACA5lC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA+E;AACE;AAC/B;AACoC;AAOtF;IAYE,2BAAoB,WAAwB,EAAU,IAAgB;QAAlD,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAR5D,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAG3D,cAAS,GAAG,EAAE,CAAC;QAEf,eAAU,GAAG,KAAK,CAAC;QACnB,uBAAkB,GAAQ,EAAE,CAAC;QAGlC,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,oCAAQ,GAAR;QAAA,iBAeC;QAdC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,mBAAmB,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3F,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAC1C,aAAG;YACD,IAAI,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YAC3B,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACnC,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC,EACD,aAAG;YACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,oCAAQ,GAAhB,UAAiB,IAAc;QAAd,gCAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CACpC;YACE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAM,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,WAAW,EAAE,CAAC,EAAE,CAAC;YACjB,KAAK,EAAE,IAAI,0DAAW,EAAE;SACzB,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,uCAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,qBAAqB,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,SAAS,GAAG,aAAa,CAAC;QACrF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAC5C,aAAG;YACD,KAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,kCAAM,GAAb,UAAc,QAAQ;QAAtB,iBAaC;QAZC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAChF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,aAAG;YACD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,EAAE,aAAG;YACJ,IAAI,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;YACvC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvB,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC9E,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,sCAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IApFQ;QAAR,2DAAK,EAAE;;sDAAc;IACb;QAAR,2DAAK,EAAE;;mDAAW;IACT;QAAT,4DAAM,EAAE;kCAAa,0DAAY;yDAAgC;IAJvD,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAaiC,0DAAW,EAAgB,+DAAU;OAZ3D,iBAAiB,CAuF7B;IAAD,wBAAC;CAAA;AAvF6B;;;;;;;;;;;;ACV9B,gIAAgI,aAAa,kTAAkT,oBAAoB,8cAA8c,mCAAmC,SAAS,yBAAyB,wBAAwB,qS;;;;;;;;;;;ACA9/B,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA+E;AACxB;AACL;AACoC;AAOtF;IAWE,2BAAoB,WAAwB,EAAU,IAAgB;QAAlD,gBAAW,GAAX,WAAW,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QAP5D,eAAU,GAAsB,IAAI,0DAAY,EAAO,CAAC;QAG3D,cAAS,GAAG,EAAE,CAAC;QAEf,eAAU,GAAG,KAAK,CAAC;QAGxB,IAAI,CAAC,QAAQ,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,QAAQ,CAAC;IAC1D,CAAC;IAED,oCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;IACK,0CAAc,GAAtB;QAAA,iBAWC;QAVC,IAAI,mBAAmB,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3F,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAC1C,aAAG;YACD,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC,EACD,aAAG;YACD,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,uCAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,qBAAqB,GAAG,mEAAQ,GAAG,8EAAmB,CAAC,SAAS,GAAG,aAAa,CAAC;QACrF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAC5C,aAAG;YACD,KAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,sCAAU,GAAjB;QACE,IAAI,QAAQ,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACI,4CAAgB,GAAvB,UAAwB,IAAI;QAA5B,iBASC;QARC,IAAI,wBAAwB,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC;QAC7G,IAAI,UAAU,GAAG;YACf,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE;SAC1B,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,EAAE,UAAU,CAAC,CAAC,SAAS,CAC9D,aAAG;YACD,KAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IApEQ;QAAR,2DAAK,EAAE;;sDAAc;IACb;QAAR,2DAAK,EAAE;;mDAAW;IACT;QAAT,4DAAM,EAAE;kCAAa,0DAAY;yDAAgC;IAJvD,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAYiC,0DAAW,EAAgB,+DAAU;OAX3D,iBAAiB,CAwE7B;IAAD,wBAAC;CAAA;AAxE6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVW;AACM;AACmB;AACqB;AAC3C;AAC+B;AACtB;AAE6C;AACrB;AACQ;AACG;AACnC;AACF;AAC2C;AAClB;AACtB;AACyB;AACA;AACY;AACG;AACA;AA8C9F;IAAA;IAA8B,CAAC;IAAlB,cAAc;QA5C1B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,kEAAmB;gBACnB,qEAAgB;gBAChB,yDAAW,CAAC,OAAO,EAAE;gBACrB,iEAAe;gBACf,qJAAiC;gBACjC,gEAAkB,CAAC,OAAO,EAAE;gBAC5B,oEAAc;aACf;YACD,YAAY,EAAE;gBACZ,yFAAqB;gBACrB,iGAAmB;gBACnB,qGAAoB;gBACpB,2GAAsB;gBACtB,yFAAgB;gBAChB,4FAAiB;gBACjB,4FAAiB;gBACjB,wGAAqB;gBACrB,2GAAsB;gBACtB,2GAAsB;aACvB;YACD,eAAe,EAAE;gBACf,iGAAmB;gBACnB,qGAAoB;gBACpB,yFAAgB;gBAChB,4FAAiB;gBACjB,4FAAiB;gBACjB,wGAAqB;gBACrB,2GAAsB;gBACtB,2GAAsB;aACvB;YACD,OAAO,EAAE;gBACP,4DAAY;gBACZ,iGAAmB;aACpB;YACD,SAAS,EAAE;gBACT,+DAAU;gBACV,EAAE,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,mFAAc,EAAE,KAAK,EAAE,IAAI,EAAE;gBACrE,kEAAe;aAChB;SACF,CAAC;OACW,cAAc,CAAI;IAAD,qBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;ACjE4B;AACsB;AACiB;AAE9F,IAAM,MAAM,GAAW;IACnB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,yFAAqB,EAAE;IAC9C,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,0GAAsB,EAAE;CACrD,CAAC;AAEK,IAAM,eAAe,GAAwB,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXvC;AAGZ;AACE;AAGjC;IAEE;IAAgB,CAAC;IAFN,eAAe;QAD3B,gEAAU,EAAE;;OACA,eAAe,CAI3B;IAAD,sBAAC;CAAA;AAJ2B","file":"modules-projects-projects-module.js","sourcesContent":["module.exports = \"<form class=\\\"card mb-0\\\" [formGroup]=\\\"dataForm\\\" novalidate (ngSubmit)=\\\"submit(dataForm)\\\">\\n  <div class=\\\"card-header\\\">\\n    <h3 class=\\\"card-title\\\">Create Iteration</h3>\\n    <div class=\\\"card-options\\\">\\n      <button class=\\\"btn btn-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n        <i class=\\\"fe fe-x\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    \\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Name\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Iteration Name\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.name.errors && (dataForm.controls.name.dirty || dataForm.controls.name.touched) || apiValidatedErrors.name?.haserror}\\\">\\n          <div *ngIf=\\\"!apiValidatedErrors.name?.haserror else nameError\\\" class=\\\"invalid-feedback\\\">Iteration name required !</div>\\n          <ng-template #nameError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.name.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Type\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <select formControlName=\\\"type\\\" class=\\\"form-control\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.type.errors && (dataForm.controls.type.dirty || dataForm.controls.type.touched) || apiValidatedErrors.name?.haserror}\\\">\\n            <option value=''>Select</option>\\n            <option value='1'>Regular</option>\\n            <option value='2'>Support/Maintenance</option>\\n          </select>\\n          <div *ngIf=\\\"!apiValidatedErrors.type?.haserror else typeError\\\" class=\\\"invalid-feedback\\\">Iteration type required !</div>\\n          <ng-template #typeError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.type.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Start Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"start_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.start_date.errors && (dataForm.controls.start_date.dirty || dataForm.controls.start_date.touched)  || apiValidatedErrors.start_date?.haserror}\\\"\\n            placeholder=\\\"Iteration start date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.start_date?.haserror else startDateError\\\" class=\\\"invalid-feedback\\\">Iteration start date required !</div>\\n          <ng-template #startDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.start_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">End Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"end_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.end_date.errors && (dataForm.controls.end_date.dirty || dataForm.controls.end_date.touched) || apiValidatedErrors.end_date?.haserror}\\\"\\n            placeholder=\\\"Iteration end date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.end_date?.haserror else endDateError\\\" class=\\\"invalid-feedback\\\">Iteration end date required !</div>\\n          <ng-template #endDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.end_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"form-label\\\">Team(s)\\n            <span class=\\\"form-required\\\">*</span>\\n          </div>\\n          <ng-select [items]=\\\"teamList | objIterator\\\" formControlName=\\\"team\\\" bindLabel=\\\"name\\\" bindValue=\\\"id\\\" [multiple]=\\\"true\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.team.errors && (dataForm.controls.team.dirty || dataForm.controls.team.touched)\\n          || apiValidatedErrors.team?.haserror}\\\" placeholder=\\\"Select team(s)\\\"\\n            (change)=\\\"filterUserList()\\\"></ng-select>\\n          <div *ngIf=\\\"!apiValidatedErrors.team?.haserror else teamError\\\" class=\\\"invalid-feedback\\\">Team is required !</div>\\n          <ng-template #teamError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.team.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"form-label\\\">Assign following resources for this iteration</div>\\n          <ng-select [items]=\\\"teamBasedUserList | objIterator\\\" formControlName=\\\"users\\\" bindLabel=\\\"name\\\" bindValue=\\\"id\\\" [multiple]=\\\"true\\\"\\n            placeholder=\\\"Select users\\\"></ng-select>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"form-label\\\">Description</label>\\n      <textarea rows=\\\"3\\\" class=\\\"form-control\\\" formControlName=\\\"description\\\" placeholder=\\\"Description\\\"></textarea>\\n    </div>\\n\\n\\n  </div>\\n  <div class=\\\"card-footer text-right\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelForm()\\\">Cancel</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"!dataForm.valid\\\">Submit</button>\\n  </div>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\nimport { ValidatorService\n} from '../../../../shared/shared-services-and-components-module/services/validators.service';\n\n\n@Component({\n  selector: 'app-iteration-add',\n  templateUrl: './iteration-add.component.html',\n  styleUrls: ['./iteration-add.component.scss']\n})\n\nexport class IterationAddComponent implements OnInit {\n  @Input() project: any;\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  public usersList = [];\n  public teamList = [];\n  public teamBasedUserList = [];\n  private endPoint: string;\n  public apiValidatedErrors: any = {};\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient, private validatorService: ValidatorService) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n\n  ngOnInit() {\n    this.getAllUsers();\n    this.getAllTeams();\n    this.initForm();\n  }\n\n  /**\n   * Get all resources\n   */\n  private getAllUsers() {\n    let resourcesListEndPoint = BASE_URL + ApplicationConstant.RESOURCES + '?filter=all';\n    this.http.get(resourcesListEndPoint).subscribe(\n      res => {\n        this.usersList = res['data'];\n      }\n    );\n  }\n\n  /**\n  * Get all project\n  */\n  private getAllTeams() {\n    let endpoint = this.endPoint + '/' + this.project.id + '/teams' + '?filter=user-specific';\n    this.http.get(endpoint).subscribe(\n      res => {\n        this.teamList = res['data'];\n      }\n    );\n  }\n\n\n  /**\n   * Init projet team form\n   *\n   * @param data\n   */\n  private initForm(data: any = {}) {\n    this.dataForm = this.formBuilder.group(\n      {\n        name: ['', [this.validatorService.validateNotEmptyString]],\n        start_date: new FormControl(\n          null, Validators.required\n        ),\n        end_date: new FormControl(\n          null, Validators.required\n        ),\n        type: ['', [this.validatorService.validateNotEmptyString]],\n        description: [''],\n        team: new FormControl(\n          null, Validators.required\n        ),\n        users: new FormControl()\n      }\n    );\n  }\n\n  /**\n   * Submit data\n   *\n   * @param dataForm\n   */\n  public submit(dataForm) {\n    let endpoint = this.endPoint + '/' + this.project.id + '/iterations';\n    this.http.post(endpoint, dataForm.value).subscribe(\n      res => {\n        this.formResult.emit(res);\n      }, err => {\n        console.log(err);\n        let apiErrors = err['error']['errors'];\n        for (let errs in apiErrors) {\n          if (errs !== undefined) {\n            this.apiValidatedErrors[errs] = { haserror: true, errors: apiErrors[errs] };\n          }\n        }\n      });\n  }\n\n  /**\n   * For cancel event\n   */\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n\n  /**\n   * Filter users based on team\n   */\n  public filterUserList() {\n    this.teamBasedUserList = [];\n    let selectedTeam = this.dataForm.value.team;\n    let object = this;\n    selectedTeam.forEach(function (teamId) {\n      if (object.teamList.hasOwnProperty(teamId)) {\n        let team = object.teamList[teamId];\n        team.users.forEach(function (userID) {\n          if (object.usersList.hasOwnProperty(userID)) {\n            object.teamBasedUserList[userID] = object.usersList[userID];\n          }\n        });\n      }\n    });\n  }\n}\n","module.exports = \"<form class=\\\"card mb-0\\\" [formGroup]=\\\"dataForm\\\" novalidate (ngSubmit)=\\\"submit(dataForm)\\\">\\n  <div class=\\\"card-header\\\">\\n    <h3 class=\\\"card-title\\\">Edit Iteration</h3>\\n    <div class=\\\"card-options\\\">\\n      <button class=\\\"btn btn-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n        <i class=\\\"fe fe-x\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Name\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Iteration Name\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.name.errors && (dataForm.controls.name.dirty || dataForm.controls.name.touched) || apiValidatedErrors.name?.haserror}\\\">\\n          <div *ngIf=\\\"!apiValidatedErrors.name?.haserror else nameError\\\" class=\\\"invalid-feedback\\\">Iteration name required !</div>\\n          <ng-template #nameError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.name.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Type\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <select formControlName=\\\"type\\\" class=\\\"form-control\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.type.errors && (dataForm.controls.type.dirty || dataForm.controls.type.touched) || apiValidatedErrors.name?.haserror}\\\">\\n            <option value=''>Select</option>\\n            <option value='1'>Regular</option>\\n            <option value='2'>Support/Maintenance</option>\\n          </select>\\n          <div *ngIf=\\\"!apiValidatedErrors.type?.haserror else typeError\\\" class=\\\"invalid-feedback\\\">Iteration type required !</div>\\n          <ng-template #typeError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.type.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Start Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"start_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.start_date.errors && (dataForm.controls.start_date.dirty || dataForm.controls.start_date.touched)  || apiValidatedErrors.start_date?.haserror}\\\"\\n            placeholder=\\\"Iteration start date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.start_date?.haserror else startDateError\\\" class=\\\"invalid-feedback\\\">Iteration start date required !</div>\\n          <ng-template #startDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.start_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">End Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"end_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.end_date.errors && (dataForm.controls.end_date.dirty || dataForm.controls.end_date.touched) || apiValidatedErrors.end_date?.haserror}\\\"\\n            placeholder=\\\"Iteration end date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.end_date?.haserror else endDateError\\\" class=\\\"invalid-feedback\\\">Iteration end date required !</div>\\n          <ng-template #endDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.end_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <div class=\\\"form-label\\\">Team(s)\\n        <span class=\\\"form-required\\\">*</span>\\n      </div>\\n      <ng-select [items]=\\\"teamList | objIterator\\\" formControlName=\\\"team\\\" bindLabel=\\\"name\\\" bindValue=\\\"id\\\" [multiple]=\\\"true\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.team.errors && (dataForm.controls.team.dirty || dataForm.controls.team.touched)\\n              || apiValidatedErrors.team?.haserror}\\\" placeholder=\\\"Select team(s)\\\"></ng-select>\\n      <div *ngIf=\\\"!apiValidatedErrors.team?.haserror else teamError\\\" class=\\\"invalid-feedback\\\">Team is required !</div>\\n      <ng-template #teamError>\\n        <div *ngFor=\\\"let err of apiValidatedErrors.team.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n      </ng-template>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"form-label\\\">Description</label>\\n      <textarea rows=\\\"3\\\" class=\\\"form-control\\\" formControlName=\\\"description\\\" placeholder=\\\"Description\\\"></textarea>\\n    </div>\\n  </div>\\n  <div class=\\\"card-footer text-right\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelForm()\\\">Cancel</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"!dataForm.valid\\\">Submit</button>\\n  </div>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\nimport { ValidatorService\n} from '../../../../shared/shared-services-and-components-module/services/validators.service';\n\n@Component({\n  selector: 'app-iteration-edit',\n  templateUrl: './iteration-edit.component.html',\n  styleUrls: ['./iteration-edit.component.scss']\n})\nexport class IterationEditComponent implements OnInit {\n\n  @Input() project: any;\n  @Input() iteration: any;\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  public teamList = [];\n  private endPoint: string;\n  public dataLoaded = false;\n  public apiValidatedErrors: any = {};\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient, private validatorService: ValidatorService) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.getIterationDetails();\n    this.getAllTeams();\n    this.initForm();\n  }\n\n  /**\n   * Get iteration details\n   */\n  private getIterationDetails() {\n    let iterationDetailsEndpoint = this.endPoint + '/' + this.project.id + '/iterations/' + this.iteration.id;\n    this.http.get(iterationDetailsEndpoint).subscribe(\n      res => {\n        this.iteration = res['data'];\n        this.dataForm.patchValue({\n          name: this.iteration.name,\n          type: this.iteration.type,\n          start_date: new Date(this.iteration.startDate),\n          end_date: new Date(this.iteration.endDate),\n          description: this.iteration.description,\n          team: this.iteration.team,\n        });\n        this.dataLoaded = true;\n      }\n    );\n  }\n\n  /**\n  * Get teams under this project\n  */\n  private getAllTeams() {\n    let endpoint = this.endPoint + '/' + this.project.id + '/teams' + '?filter=user-specific';\n    this.http.get(endpoint).subscribe(\n      res => {\n        this.teamList = res['data'];\n      }\n    );\n  }\n\n   /**\n   * Init iteration team form\n   *\n   * @param data\n   */\n  private initForm(data: any = {}) {\n    this.dataForm = this.formBuilder.group(\n      {\n        name: ['', [<any>Validators.required]],\n        start_date: new FormControl(\n          null, Validators.required\n        ),\n        end_date: new FormControl(\n          null, Validators.required\n        ),\n        type: ['', [<any>Validators.required]],\n        description: [''],\n        team: new FormControl(null, Validators.required)\n      }\n    );\n  }\n\n  /**\n   * Submit data\n   *\n   * @param dataForm\n   */\n  public submit(dataForm) {\n    let endpoint = this.endPoint + '/' + this.project.id + '/iterations/' + this.iteration.id;\n    this.http.post(endpoint, dataForm.value).subscribe(\n      res => {\n        this.formResult.emit(res);\n      }, err => {\n        let apiErrors = err['error']['errors'];\n        for (let errs in apiErrors) {\n          if (errs !== undefined) {\n            this.apiValidatedErrors[errs] = { haserror: true, errors: apiErrors[errs] };\n          }\n        }\n      });\n  }\n\n  /**\n   * For cancel event\n   */\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n}\n","module.exports = \"<div class=\\\"table-responsive\\\">\\n  <table class=\\\"table table-bordered table-sm mb-0\\\">\\n    <tbody>\\n      <tr>\\n        <th colspan=\\\"4\\\">\\n          <h3 class=\\\"mb-0\\\">\\n            {{ iteration.name }}\\n            <button class=\\\"btn btn-sm float-right\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n              <i class=\\\"fe fe-x\\\"></i>\\n            </button>\\n          </h3>\\n        </th>\\n      </tr>\\n      <tr>\\n        <th>Start Date</th>\\n        <td>{{ iteration.startDate | date }}</td>\\n        <th>End Date</th>\\n        <td>{{ iteration.endDate | date }}</td>\\n      </tr>\\n      <tr>\\n        <th>Type</th>\\n        <td>{{ iteration.typeLabel }}</td>\\n        <th>Teams</th>\\n        <td>\\n          <span *ngFor=\\\"let item of iteration.team;\\\" class=\\\"badge badge-info ml-1\\\">\\n            <ng-container *ngIf=\\\"teamList[item]\\\">\\n              {{ teamList[item].name }}\\n            </ng-container>\\n          </span>\\n        </td>\\n      </tr>\\n      <tr>\\n        <th>Description</th>\\n        <td colspan=\\\"3\\\">{{ iteration.description }}</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\n\n@Component({\n  selector: 'app-iteration-view',\n  templateUrl: './iteration-view.component.html',\n  styleUrls: ['./iteration-view.component.scss']\n})\nexport class IterationViewComponent implements OnInit {\n\n  @Input() project: any;\n  @Input() iteration: any;\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  private endPoint: string;\n  public dataLoaded = false;\n  public teamList = [];\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.getIterationDetails();\n    this.getAllTeams();\n  }\n\n  /**\n  * Get iteration details\n  */\n  private getIterationDetails() {\n    let iterationDetailsEndpoint = this.endPoint + '/' + this.project.id + '/iterations/' + this.iteration.id;\n    this.http.get(iterationDetailsEndpoint).subscribe(\n      res => {\n        this.iteration = res['data'];\n        this.dataLoaded = true;\n      }\n    );\n  }\n\n  /**\n  * Get teams under this project\n  */\n  private getAllTeams() {\n    let endpoint = this.endPoint + '/' + this.project.id + '/teams';\n    this.http.get(endpoint).subscribe(\n      res => {\n        this.teamList = res['data'];\n      }\n    );\n  }\n\n  /**\n   * For cancel event\n   */\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n}\n","module.exports = \"<form class=\\\"card mb-0\\\" [formGroup]=\\\"dataForm\\\" novalidate (ngSubmit)=\\\"submit(dataForm)\\\">\\n  <div class=\\\" card-header\\\">\\n    <h3 class=\\\"card-title\\\">Create Project</h3>\\n    <div class=\\\"card-options\\\">\\n      <button class=\\\"btn btn-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n        <i class=\\\"fe fe-x\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Name\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Project Name\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.name.errors && (dataForm.controls.name.dirty || dataForm.controls.name.touched) || apiValidatedErrors.name?.haserror}\\\">\\n          <div *ngIf=\\\"!apiValidatedErrors.name?.haserror else nameError\\\" class=\\\"invalid-feedback\\\">Project name required !</div>\\n          <ng-template #nameError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.name.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Code\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"code\\\" placeholder=\\\"Project Code\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.code.errors && (dataForm.controls.code.dirty || dataForm.controls.code.touched) || apiValidatedErrors.code?.haserror}\\\">\\n          <div *ngIf=\\\"!apiValidatedErrors.code?.haserror else codeError\\\" class=\\\"invalid-feedback\\\">Project code required !</div>\\n          <ng-template #codeError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.code.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Start Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"start_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.start_date.errors && (dataForm.controls.start_date.dirty || dataForm.controls.start_date.touched) || apiValidatedErrors.start_date?.haserror}\\\"\\n            placeholder=\\\"Project start date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.start_date?.haserror else startDateError\\\" class=\\\"invalid-feedback\\\">Project start date required !</div>\\n          <ng-template #startDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.start_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">End Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"end_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.end_date.errors && (dataForm.controls.end_date.dirty || dataForm.controls.end_date.touched) || apiValidatedErrors.end_date?.haserror}\\\"\\n            placeholder=\\\"Project end date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.end_date?.haserror else endDateError\\\" class=\\\"invalid-feedback\\\">Project end date required !</div>\\n          <ng-template #endDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.end_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Type\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <select formControlName=\\\"type\\\" class=\\\"form-control\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.type.errors && (dataForm.controls.type.dirty || dataForm.controls.type.touched) || apiValidatedErrors.end_date?.haserror}\\\">\\n            <option value=''>Select</option>\\n            <option value='1'>Fixed project</option>\\n            <option value='2'>Time & material</option>\\n          </select>\\n          <div *ngIf=\\\"!apiValidatedErrors.type?.haserror else typeError\\\" class=\\\"invalid-feedback\\\">Project type required !</div>\\n          <ng-template #typeError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.type.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"form-label\\\">Status</div>\\n          <div class=\\\"custom-controls-stacked\\\">\\n            <label class=\\\"custom-control custom-radio custom-control-inline\\\">\\n              <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" formControlName=\\\"status\\\" value='1'>\\n              <span class=\\\"custom-control-label\\\">Active</span>\\n            </label>\\n            <label class=\\\"custom-control custom-radio custom-control-inline\\\">\\n              <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" formControlName=\\\"status\\\" value='2'>\\n              <span class=\\\"custom-control-label\\\">Inactive</span>\\n            </label>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group mb-0\\\">\\n      <label class=\\\"form-label\\\">Description</label>\\n      <textarea rows=\\\"3\\\" class=\\\"form-control\\\" formControlName=\\\"description\\\" placeholder=\\\"Description\\\"></textarea>\\n    </div>\\n  </div>\\n  <div class=\\\"card-footer text-right\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelForm()\\\">Cancel</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"!dataForm.valid\\\">Submit</button>\\n  </div>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient, HttpParams, HttpRequest } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\nimport {\n  ValidatorService\n} from '../../../../shared/shared-services-and-components-module/services/validators.service';\n\n@Component({\n  selector: 'app-project-add',\n  templateUrl: './project.add.component.html',\n  styleUrls: ['./project.add.component.scss'],\n})\nexport class ProjectAddComponent implements OnInit {\n\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  private endPoint: string;\n  public apiValidatedErrors: any = {};\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient,\n    private validatorService: ValidatorService\n  ) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  private initForm(data: any = {}) {\n    this.dataForm = this.formBuilder.group(\n      {\n        code: ['', [this.validatorService.validateNotEmptyString]],\n        name: ['', [this.validatorService.validateNotEmptyString]],\n        start_date: new FormControl(\n          null, Validators.required\n        ),\n        end_date: new FormControl(\n          null, Validators.required\n        ),\n        type: ['', [this.validatorService.validateNotEmptyString]],\n        status: ['1', [this.validatorService.validateNotEmptyString]],\n        description: ['']\n      }\n    );\n  }\n\n  public submit(dataForm) {\n    let endpoint = this.endPoint;\n    this.http.post(endpoint, dataForm.value).subscribe(\n      res => {\n        this.formResult.emit(res);\n      }, err => {\n        let apiErrors = err['error']['errors'];\n        for (let errs in apiErrors) {\n          if (errs !== undefined) {\n            this.apiValidatedErrors[errs] = { haserror: true, errors: apiErrors[errs] };\n          }\n        }\n        console.log(this.apiValidatedErrors);\n      });\n  }\n\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n\n}\n","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12 col-md-12\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-header\\\">\\n        <h3 class=\\\"card-title pull-xs-left\\\">{{ project.name }}</h3>\\n        <div class=\\\"card-options\\\">\\n          <button class=\\\"btn btn-sm btn-outline-secondary\\\" (click)=\\\"openProjectEditForm(project)\\\" *hasPermission=\\\"'create-projects'\\\">\\n            <i class=\\\"fe fe-edit\\\"></i>\\n          </button>\\n        </div>\\n      </div>\\n      <div class=\\\"card-body\\\">\\n        <div class=\\\"table-reponsive\\\">\\n          <table class=\\\"table table-bordered table-sm\\\">\\n            <tbody>\\n              <tr>\\n                <th width=\\\"15%\\\">Name</th>\\n                <td width=\\\"30%\\\">{{ project.name }}</td>\\n                <th width=\\\"15%\\\">Code</th>\\n                <td width=\\\"30%\\\">{{ project.code }}</td>\\n              </tr>\\n              <tr>\\n                <th>Start Date</th>\\n                <td>{{ project.startDate | date }}</td>\\n                <th>End Date</th>\\n                <td>{{ project.endDate | date }}</td>\\n              </tr>\\n              <tr>\\n                <th>Type</th>\\n                <td>{{ project.typeLabel }}</td>\\n                <th>Status</th>\\n                <td>{{ project.statusLabel }}</td>\\n              </tr>\\n              <tr>\\n                <th>Description</th>\\n                <td colspan=\\\"3\\\">{{ project.description }}</td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n\\n        <div class=\\\"table-reponsive mt-6\\\">\\n          <table class=\\\"table table-bordered table-sm\\\">\\n            <thead>\\n              <tr>\\n                <th colspan=\\\"5\\\">\\n                  <h4 class=\\\"mb-0\\\">\\n                    <span class=\\\"align-middle\\\">Project teams</span>\\n                    <button class=\\\"btn btn-sm btn-outline-secondary float-right\\\" (click)=\\\"openTeamAddForm(project)\\\" *ngIf=\\\"!!project.permissions &&  project.permissions.indexOf('can-add-project-teams') !== -1\\\">\\n                      <i class=\\\"fe fe-plus-circle\\\"></i>\\n                    </button>\\n                  </h4>\\n                </th>\\n              </tr>\\n              <tr>\\n                <th width=\\\"5%\\\">#</th>\\n                <th>Name</th>\\n                <th>Description</th>\\n                <th width=\\\"15%\\\">No. of members</th>\\n                <th width=\\\"10%\\\">Actions</th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr *ngFor=\\\"let item of teams | objIterator;let i= index\\\">\\n                <td>\\n                  <span class=\\\"text-muted\\\">{{ i+1 }}.</span>\\n                </td>\\n                <td>{{ item.name }}</td>\\n                <td>{{ item.description }}</td>\\n                <td>{{ item.users.length }}</td>\\n                <td>\\n                  <a class=\\\"icon\\\" (click)=\\\"openTeamViewPage(project, item)\\\">\\n                    <i class=\\\"fe fe-eye\\\"></i>\\n                  </a>\\n                  <a class=\\\"icon ml-2\\\" (click)=\\\"openTeamEditForm(project, item)\\\" *ngIf=\\\"!!item.permissions && item.permissions.indexOf('can-edit-team') !== -1\\\">\\n                    <i class=\\\"fe fe-edit\\\"></i>\\n                  </a>\\n                </td>\\n              </tr>\\n              <tr *ngIf='teams.length === 0'>\\n                <td colspan=\\\"5\\\">No results found.</td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n\\n        <div class=\\\"table-reponsive mt-6\\\">\\n          <table class=\\\"table table-bordered table-sm\\\">\\n            <thead>\\n              <tr>\\n                <th colspan=\\\"6\\\">\\n                  <h4 class=\\\"mb-0\\\">\\n                    <span class=\\\"align-middle\\\">Project Iterations</span>\\n                    <button class=\\\"btn btn-sm btn-outline-secondary float-right\\\" (click)=\\\"openIterationAddForm(project)\\\" *ngIf=\\\"!!project.permissions && project.permissions.indexOf('can-add-project-iterations') !== -1\\\">\\n                      <i class=\\\"fe fe-plus-circle\\\"></i>\\n                    </button>\\n                  </h4>\\n                </th>\\n              </tr>\\n              <tr>\\n                <th width=\\\"5%\\\">#</th>\\n                <th>Name</th>\\n                <th width=\\\"15%\\\">Start date</th>\\n                <th width=\\\"15%\\\">End date</th>\\n                <th width=\\\"10%\\\">Type</th>\\n                <th width=\\\"10%\\\">Actions</th>\\n              </tr>\\n            </thead>\\n            <tbody>\\n              <tr *ngFor=\\\"let item of iterations | objIterator;let i= index\\\">\\n                <td>\\n                  <span class=\\\"text-muted\\\">{{ i+1 }}.</span>\\n                </td>\\n                <td>{{ item.name }}</td>\\n                <td>{{ item.startDate | date }}</td>\\n                <td>{{ item.endDate | date }}</td>\\n                <td>{{ item.typeLabel }}</td>\\n                <td>\\n                  <a class=\\\"icon\\\" (click)=\\\"openIterationViewPopUP(project, item)\\\">\\n                    <i class=\\\"fe fe-eye\\\"></i>\\n                  </a>\\n                  <a class=\\\"icon ml-2\\\" (click)=\\\"openIterationEditForm(project, item)\\\" *ngIf=\\\"!!item.permissions &&  item.permissions.indexOf('can-edit-iteration') !== -1\\\">\\n                    <i class=\\\"fe fe-edit\\\"></i>\\n                  </a>\\n                </td>\\n              </tr>\\n              <tr *ngIf='iterations.length === 0'>\\n                <td colspan=\\\"6\\\">No results found.</td>\\n              </tr>\\n            </tbody>\\n          </table>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"modal fade\\\" bsModal #modalwindow=\\\"bs-modal\\\" [config]=\\\"{backdrop: 'static'}\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"dialog-static-name\\\">\\n  <div class=\\\"modal-dialog modal-lg\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body\\\">\\n        <div #dynamicResourceContent></div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"\"","import {Component, OnInit, ViewChild, ViewContainerRef, ComponentFactoryResolver, ReflectiveInjector} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProjectEditComponent } from '../project-edit/project.edit.component';\nimport { TeamAddComponent } from '../team-add/team-add.component';\nimport { TeamEditComponent } from '../team-edit/team-edit.component';\nimport { TeamViewComponent } from '../team-view/team-view.component';\nimport { IterationAddComponent } from '../iteration-add/iteration-add.component';\nimport { IterationEditComponent } from '../iteration-edit/iteration-edit.component';\nimport { IterationViewComponent } from '../iteration-view/iteration-view.component';\nimport { CommonSharedDataStorageService\n} from '../../../../shared/shared-services-and-components-module/services/common-shared-data-storage.service';\n\n@Component({\n  selector: 'app-project-detail',\n  templateUrl: './project-detail.component.html',\n  styleUrls: ['./project-detail.component.scss']\n})\nexport class ProjectDetailComponent implements OnInit {\n\n  @ViewChild('modalwindow') public taskViewModal: ModalDirective;\n  @ViewChild('confirmationdialog') public confirmationdialog;\n  @ViewChild('dynamicResourceContent', { read: ViewContainerRef })\n  dynamicResourceContent: ViewContainerRef;\n\n  public project: any = [];\n  public iterations = [];\n  public teams = [];\n  private endPoint: string;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private http: HttpClient,\n    private commonSharedDataStorageService: CommonSharedDataStorageService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS + '/' + this.route.snapshot.params['id'];\n  }\n\n  ngOnInit() {\n    this.getProjectDetails();\n    this.getAllIterations();\n    this.getAllTeams();\n  }\n\n  /**\n   * Get single project details\n   */\n  private getProjectDetails() {\n    let endpoint = this.endPoint;\n    this.http.get(endpoint).subscribe(\n      res => {\n        this.project = res['data'];\n      }, err => {\n        this.router.navigateByUrl('404');\n        this.commonSharedDataStorageService.errorPageButtonType = 'Home';\n      }\n    );\n  }\n\n  /**\n   * Open project edit form\n   *\n   * @param project\n   */\n  openProjectEditForm(project) {\n    this.projectEditFormComp(project);\n    this.taskViewModal.show();\n  }\n\n  /**\n   * Close modal window\n   */\n  public closeModalWindow() {\n    this.dynamicResourceContent.detach();\n    this.dynamicResourceContent.clear();\n    this.taskViewModal.hide();\n    this.getAllTeams();\n  }\n\n  /**\n   * Save changes\n   *\n   * @param project\n   */\n  private projectEditFormComp(project) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(ProjectEditComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.formResult.subscribe(\n      res => {\n        this.getProjectDetails();\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  /**\n   * Team add form\n   *\n   * @param project\n   */\n  openTeamAddForm(project) {\n    this.teamAddFormComp(project);\n    this.taskViewModal.show();\n  }\n\n  /**\n   * Inject team component to this view\n   *\n   * @param project\n   */\n  private teamAddFormComp(project) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(TeamAddComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.formResult.subscribe(\n      res => {\n        this.getAllTeams();\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  /**\n  * Team edit form\n  *\n  * @param project\n  * @param team\n  */\n  openTeamEditForm(project, team) {\n    this.teamEditFormComp(project, team);\n    this.taskViewModal.show();\n  }\n\n  /**\n   * Inject team edit component to this view\n   *\n   * @param project\n   * @param team\n   */\n  private teamEditFormComp(project, team) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(TeamEditComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.team = team;\n    comp.instance.formResult.subscribe(\n      res => {\n        this.getAllTeams();\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  /**\n  * Team view page\n  *\n  * @param project\n  * @param team\n  */\n  openTeamViewPage(project, team) {\n    this.teamViewFormComp(project, team);\n    this.taskViewModal.show();\n  }\n\n  /**\n   * Inject team view component to this view\n   *\n   * @param project\n   * @param team\n   */\n  private teamViewFormComp(project, team) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(TeamViewComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.team = team;\n    comp.instance.formResult.subscribe(\n      res => {\n        this.getAllTeams();\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n   /**\n   * Iteration add form\n   *\n   * @param project\n   */\n  openIterationAddForm(project) {\n    this.iterationAddFormComp(project);\n    this.taskViewModal.show();\n  }\n\n  /**\n   * Inject Iteration add component to this view\n   *\n   * @param project\n   */\n  private iterationAddFormComp(project) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(IterationAddComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.formResult.subscribe(\n      res => {\n        this.getAllIterations();\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  /**\n   * Iteration edit form\n   *\n   * @param project\n   * @param iteration\n   */\n  openIterationEditForm(project, iteration) {\n    this.iterationEditFormComp(project, iteration);\n    this.taskViewModal.show();\n  }\n\n  /**\n   * Inject Iteration edit component to this view\n   *\n   * @param project\n   * @param iteration\n   */\n  private iterationEditFormComp(project, iteration) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(IterationEditComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.iteration = iteration;\n    comp.instance.formResult.subscribe(\n      res => {\n        this.getAllIterations();\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  /**\n   * Iteration view pop-up\n   *\n   * @param project\n   * @param iteration\n   */\n  openIterationViewPopUP(project, iteration) {\n    this.iterationViewPageComp(project, iteration);\n    this.taskViewModal.show();\n  }\n\n  /**\n   * Inject Iteration view component to this view\n   *\n   * @param project\n   * @param iteration\n   */\n  private iterationViewPageComp(project, iteration) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(IterationViewComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.iteration = iteration;\n    comp.instance.formResult.subscribe(\n      res => {\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  /**\n   * Get all iterations under this project\n   */\n  private getAllIterations() {\n    let endpoint = this.endPoint + '/iterations';\n    this.http.get(endpoint).subscribe(\n      res => {\n        this.iterations = res['data'];\n      }\n    );\n  }\n\n  /**\n   * Get all teams under this project\n   */\n  private getAllTeams() {\n    let endpoint = this.endPoint + '/teams';\n    this.http.get(endpoint).subscribe(\n      res => {\n        this.teams = res['data'];\n      }\n    );\n  }\n}\n","module.exports = \"<form *ngIf=\\\"dataLoaded\\\" class=\\\"card mb-0\\\" [formGroup]=\\\"dataForm\\\" novalidate (ngSubmit)=\\\"submit(dataForm)\\\">\\n  <div class=\\\" card-header\\\">\\n    <h3 class=\\\"card-title\\\">Edit Project - {{ project.code }}</h3>\\n    <div class=\\\"card-options\\\">\\n      <button class=\\\"btn btn-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n        <i class=\\\"fe fe-x\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Name\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Project Name\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.name.errors && (dataForm.controls.name.dirty || dataForm.controls.name.touched) || apiValidatedErrors.name?.haserror}\\\">\\n          <div *ngIf=\\\"!apiValidatedErrors.name?.haserror else nameError\\\" class=\\\"invalid-feedback\\\">Project name required !</div>\\n          <ng-template #nameError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.name.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Code\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"code\\\" placeholder=\\\"Project Code\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.code.errors && (dataForm.controls.code.dirty || dataForm.controls.code.touched) || apiValidatedErrors.code?.haserror}\\\">\\n          <div *ngIf=\\\"!apiValidatedErrors.code?.haserror else codeError\\\" class=\\\"invalid-feedback\\\">Project code required !</div>\\n          <ng-template #codeError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.code.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Start Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"start_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.start_date.errors && (dataForm.controls.start_date.dirty || dataForm.controls.start_date.touched) || apiValidatedErrors.start_date?.haserror}\\\"\\n            placeholder=\\\"Project start date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.start_date?.haserror else startDateError\\\" class=\\\"invalid-feedback\\\">Project start date required !</div>\\n          <ng-template #startDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.start_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">End Date\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"end_date\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.end_date.errors && (dataForm.controls.end_date.dirty || dataForm.controls.end_date.touched) || apiValidatedErrors.end_date?.haserror}\\\"\\n            placeholder=\\\"Project end date\\\" bsDatepicker [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD' }\\\" readonly>\\n          <div *ngIf=\\\"!apiValidatedErrors.end_date?.haserror else endDateError\\\" class=\\\"invalid-feedback\\\">Project end date required !</div>\\n          <ng-template #endDateError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.end_date.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <label class=\\\"form-label\\\">Type\\n            <span class=\\\"form-required\\\">*</span>\\n          </label>\\n          <select formControlName=\\\"type\\\" class=\\\"form-control\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.type.errors && (dataForm.controls.type.dirty || dataForm.controls.type.touched) || apiValidatedErrors.end_date?.haserror}\\\">\\n            <option value=''>Select</option>\\n            <option value='1'>Fixed project</option>\\n            <option value='2'>Time & material</option>\\n          </select>\\n          <div *ngIf=\\\"!apiValidatedErrors.type?.haserror else typeError\\\" class=\\\"invalid-feedback\\\">Project type required !</div>\\n          <ng-template #typeError>\\n            <div *ngFor=\\\"let err of apiValidatedErrors.type.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"form-label\\\">Status</div>\\n          <div class=\\\"custom-controls-stacked\\\">\\n            <label class=\\\"custom-control custom-radio custom-control-inline\\\">\\n              <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" formControlName=\\\"status\\\" value='1'>\\n              <span class=\\\"custom-control-label\\\">Active</span>\\n            </label>\\n            <label class=\\\"custom-control custom-radio custom-control-inline\\\">\\n              <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" formControlName=\\\"status\\\" value='2'>\\n              <span class=\\\"custom-control-label\\\">Inactive</span>\\n            </label>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"form-group mb-0\\\">\\n      <label class=\\\"form-label\\\">Description</label>\\n      <textarea rows=\\\"3\\\" class=\\\"form-control\\\" formControlName=\\\"description\\\" placeholder=\\\"Description\\\"></textarea>\\n    </div>\\n  </div>\\n  <div class=\\\"card-footer text-right\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelForm()\\\">Cancel</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"!dataForm.valid\\\">Submit</button>\\n  </div>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient, HttpParams, HttpRequest } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\n\n@Component({\n  selector: 'app-project-edit',\n  templateUrl: './project.edit.component.html',\n  styleUrls: ['./project.edit.component.scss'],\n})\nexport class ProjectEditComponent implements OnInit {\n\n  @Input() project: any;\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  private endPoint: string;\n  public dataLoaded = false;\n  public apiValidatedErrors = {};\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient\n  ) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    let projectDetailsEndpoint = this.endPoint + '/' + this.project.id;\n    this.http.get(projectDetailsEndpoint).subscribe(\n      res => {\n        let projectdata = res['data'];\n        this.dataForm.patchValue(\n          {\n            code: projectdata.code,\n            name: projectdata.name,\n            start_date: new Date(projectdata.startDate),\n            end_date: new Date(projectdata.endDate),\n            type: projectdata.type.toString(),\n            status: projectdata.status.toString(),\n            description: projectdata.description\n          }\n        );\n        this.dataLoaded = true;\n      },\n      err => {\n        console.log(err);\n        this.cancelForm();\n      }\n    );\n  }\n\n  private initForm(data: any = {}) {\n    this.dataForm = this.formBuilder.group(\n      {\n        code: ['', [<any>Validators.required]],\n        name: ['', [<any>Validators.required]],\n        start_date: new FormControl(\n          null, Validators.required\n        ),\n        end_date: new FormControl(\n          null, Validators.required\n        ),\n        type: ['', [<any>Validators.required]],\n        status: ['1', [<any>Validators.required]],\n        description: ['']\n      }\n    );\n  }\n\n  public submit(dataForm) {\n    let endpoint = this.endPoint + '/' + this.project.id;\n    this.http.post(endpoint, dataForm.value).subscribe(\n      res => {\n        this.formResult.emit(res);\n      }, err => {\n        let apiErrors = err['error']['errors'];\n        for (let errs in apiErrors) {\n          if (errs !== undefined) {\n            this.apiValidatedErrors[errs] = { haserror: true, errors: apiErrors[errs] };\n          }\n        }\n      });\n  }\n\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n\n}\n","module.exports = \"<div class=\\\"card\\\">\\n  <div class=\\\"card-header\\\">\\n    <h3 class=\\\"card-title pull-xs-left\\\">Projects</h3>\\n    <div class=\\\"card-options\\\">\\n      <input type=\\\"text\\\" class=\\\"form-control mr-2\\\" name=\\\"keyword\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"filterControles.keyword\\\" (input)=\\\"onFilterValueChanges()\\\">\\n      <button class=\\\"btn btn-sm btn-outline-secondary\\\" (click)=\\\"openCreateProjectWindow()\\\" *hasPermission=\\\"'create-projects'\\\"><i class=\\\"fe fe-plus-circle\\\"></i>&nbsp;</button>\\n    </div>\\n  </div>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-hover mb-0\\\">\\n      <thead>\\n        <tr>\\n          <th width=\\\"5%\\\">No.</th>\\n          <th>Name</th>\\n          <th width=\\\"10%\\\">Code</th>\\n          <th width=\\\"10%\\\">Type</th>\\n          <th width=\\\"10%\\\">Status</th>\\n          <th width=\\\"5%\\\">Actions</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let item of dataList | objIterator;let i= index\\\">\\n          <td>\\n            <span class=\\\"text-muted\\\">{{calculateLineNumber(pagination.currentPage, pagination.perPage, i)}}.</span>\\n          </td>\\n          <td>{{item.name}}</td>\\n          <td>{{item.code}}</td>\\n          <td>{{item.typeLabel}}</td>\\n          <td>{{item.statusLabel}}</td>\\n          <td>\\n            <a class=\\\"icon\\\" [routerLink]=\\\"[item.id]\\\" *hasPermission=\\\"'list-all-projects|list-user-projects'\\\">\\n              <i class=\\\"fe fe-eye\\\"></i>\\n            </a>\\n            <a class=\\\"icon ml-2\\\" href=\\\"javascript:void(0)\\\" (click)=\\\"openProjectEditForm(item)\\\" *ngIf=\\\"item.permissions.indexOf('can-edit-project') !== -1\\\">\\n              <i class=\\\"fe fe-edit\\\"></i>\\n            </a>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\\n<app-pagination *ngIf=\\\"pagination\\\" [lastPage]=\\\"calculateLastPage(pagination.total,pagination.perPage)\\\" [currentPage]=\\\"pagination.currentPage\\\"\\n  [pageCount]=\\\"pagination.perPage\\\" (changePage)=\\\"pageChanged($event)\\\"></app-pagination>\\n\\n<div class=\\\"modal fade\\\" bsModal #modalwindow=\\\"bs-modal\\\" [config]=\\\"{backdrop: 'static'}\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"dialog-static-name\\\">\\n  <div class=\\\"modal-dialog modal-lg\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body\\\">\\n        <div #dynamicResourceContent></div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"\"","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  ReflectiveInjector,\n  ComponentFactory,\n} from '@angular/core';\nimport { HttpClient, HttpParams, HttpRequest } from '@angular/common/http';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { BASE_URL, ApplicationConstant } from '../../../shared/constants/constant';\nimport { ProjectAddComponent } from './project-add/project.add.component';\nimport { ProjectEditComponent } from './project-edit/project.edit.component';\n// import { ResourcesViewComponent } from './resource-view/resources-view.component';\nimport { ProjectsService } from '../projects.service';\n\nimport {\n  CommonSharedDataStorageService\n} from '../../../shared/shared-services-and-components-module/services/common-shared-data-storage.service';\n\n@Component({\n  selector: 'app-projects-list',\n  templateUrl: './projects.list.component.html',\n  styleUrls: ['./projects.list.component.scss']\n})\nexport class ProjectsListComponent implements OnInit {\n\n  @ViewChild('modalwindow') public taskViewModal: ModalDirective;\n  @ViewChild('confirmationdialog') public confirmationdialog;\n  @ViewChild('dynamicResourceContent', { read: ViewContainerRef })\n  dynamicResourceContent: ViewContainerRef;\n\n  public dataList = [];\n  public title: string;\n  private endPoint: string;\n  public pagination: any = false;\n  private comp;\n  public masterData: any;\n\n  public filterControles = { keyword: ''};\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private http: HttpClient,\n    private projectsService: ProjectsService,\n    private commonSharedDataStorageService: CommonSharedDataStorageService\n  ) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.masterData = this.commonSharedDataStorageService.getSharedData();\n    this.getListingData();\n  }\n\n  private getListingData(page: number = 1) {\n    let endpoint = this.buildUrlWithFilterParams(this.endPoint + '?' + 'page=' + page);\n    this.http.get(endpoint).subscribe(\n      res => {\n        this.dataList = res['data'];\n        this.pagination = res['paginate'];\n      }\n    );\n  }\n\n  public openCreateProjectWindow() {\n    this.projectCreateFormComp();\n    this.taskViewModal.show();\n  }\n\n  public closeModalWindow() {\n    this.dynamicResourceContent.detach();\n    this.dynamicResourceContent.clear();\n    this.taskViewModal.hide();\n  }\n\n  private projectCreateFormComp() {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(ProjectAddComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.formResult.subscribe(\n      res => {\n        if (!res['canceled']) {\n          this.getListingData(1);\n        }\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  openProjectEditForm(project) {\n    this.projectEditFormComp(project);\n    this.taskViewModal.show();\n  }\n\n  private projectEditFormComp(project) {\n    let factory = this.componentFactoryResolver.resolveComponentFactory(ProjectEditComponent);\n    let injector = ReflectiveInjector.fromResolvedProviders([], this.dynamicResourceContent.parentInjector);\n    let comp = factory.create(injector);\n    comp.instance.project = project;\n    comp.instance.formResult.subscribe(\n      res => {\n        if (!res['canceled']) {\n          this.getListingData(this.pagination.currentPage);\n        }\n        this.closeModalWindow();\n      }\n    );\n    this.dynamicResourceContent.insert(comp.hostView);\n    return comp;\n  }\n\n  public calculateLastPage(total, perPage) {\n    return Math.ceil(total / perPage);\n  }\n\n  public pageChanged($event) {\n    this.getListingData($event);\n  }\n\n  /**\n   * On change call listing page\n   */\n  public onFilterValueChanges() {\n    this.getListingData(1);\n  }\n\n  /**\n   * Attach query parameters with endURL\n   *\n   * @param endpointUrl\n   */\n  private buildUrlWithFilterParams(endpointUrl: string): string {\n    for (const key in this.filterControles) {\n      // console.log(key, yourobject[key]);\n      if (this.filterControles[key] !== '') {\n        endpointUrl += '&' + key + '=' + this.filterControles[key];\n      }\n    }\n    return endpointUrl;\n  }\n\n  /**\n   * Calculate line number based on pagination\n   *\n   * @param currentPage\n   * @param perPage\n   */\n  public calculateLineNumber(currentPage, perPage, index) {\n    return ((currentPage - 1) * perPage) + index + 1;\n  }\n}\n","module.exports = \"<form class=\\\"card mb-0\\\" [formGroup]=\\\"dataForm\\\" novalidate (ngSubmit)=\\\"submit(dataForm)\\\">\\n  <div class=\\\"card-header\\\">\\n    <h3 class=\\\"card-title\\\">Create Project Team</h3>\\n    <div class=\\\"card-options\\\">\\n      <button class=\\\"btn btn-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n        <i class=\\\"fe fe-x\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"form-label\\\">Name\\n        <span class=\\\"form-required\\\">*</span>\\n      </label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Project Team\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.name.errors && (dataForm.controls.name.dirty || dataForm.controls.name.touched) || apiValidatedErrors.name?.haserror}\\\">\\n      <div *ngIf=\\\"!apiValidatedErrors.name?.haserror else nameError\\\" class=\\\"invalid-feedback\\\">Team name required !</div>\\n      <ng-template #nameError>\\n        <div *ngFor=\\\"let err of apiValidatedErrors.name.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n      </ng-template>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <div class=\\\"form-label\\\">Users</div>\\n      <ng-select [items]=\\\"usersList | objIterator\\\" formControlName=\\\"users\\\" bindLabel=\\\"name\\\" bindValue=\\\"id\\\" [multiple]=\\\"true\\\" placeholder=\\\"Select users\\\"></ng-select>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"form-label\\\">Description</label>\\n      <textarea rows=\\\"3\\\" class=\\\"form-control\\\" formControlName=\\\"description\\\" placeholder=\\\"Description\\\"></textarea>\\n    </div>\\n  </div>\\n  <div class=\\\"card-footer text-right\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelForm()\\\">Cancel</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"!dataForm.valid\\\">Submit</button>\\n  </div>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\n\n@Component({\n  selector: 'app-team-add',\n  templateUrl: './team-add.component.html',\n  styleUrls: ['./team-add.component.scss']\n})\nexport class TeamAddComponent implements OnInit {\n\n  @Input() project: any;\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  public usersList = [];\n  private endPoint: string;\n  public apiValidatedErrors: any = {};\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.getAllUsers();\n  }\n\n  /**\n   * Get all resources\n   */\n  private getAllUsers() {\n    let resourcesListEndPoint = BASE_URL + ApplicationConstant.RESOURCES + '?filter=all';\n    this.http.get(resourcesListEndPoint).subscribe(\n      res => {\n        this.usersList = res['data'];\n      }\n    );\n  }\n\n  /**\n   * Init projet team form\n   *\n   * @param data\n   */\n  private initForm(data: any = {}) {\n    this.dataForm = this.formBuilder.group(\n      {\n        name: ['', [<any>Validators.required]],\n        description: [''],\n        users: new FormControl()\n      }\n    );\n  }\n\n  /**\n   * Submit data\n   *\n   * @param dataForm\n   */\n  public submit(dataForm) {\n    let endpoint = this.endPoint + '/' + this.project.id + '/teams';\n    this.http.post(endpoint, dataForm.value).subscribe(\n      res => {\n        this.formResult.emit(res);\n      }, err => {\n        let apiErrors = err['error']['errors'];\n        for (let errs in apiErrors) {\n          if (errs !== undefined) {\n            this.apiValidatedErrors[errs] = { haserror: true, errors: apiErrors[errs] };\n          }\n        }\n      });\n  }\n\n  /**\n   * For cancel event\n   */\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n\n}\n","module.exports = \"<form class=\\\"card mb-0\\\" [formGroup]=\\\"dataForm\\\" novalidate (ngSubmit)=\\\"submit(dataForm)\\\">\\n  <div class=\\\"card-header\\\">\\n    <h3 class=\\\"card-title\\\">Edit Project Team - {{ team.name }}</h3>\\n    <div class=\\\"card-options\\\">\\n      <button class=\\\"btn btn-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n        <i class=\\\"fe fe-x\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"form-label\\\">Name\\n        <span class=\\\"form-required\\\">*</span>\\n      </label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Project Team Name\\\" [ngClass]=\\\"{'is-invalid': dataForm.controls.name.errors && (dataForm.controls.name.dirty || dataForm.controls.name.touched) || apiValidatedErrors.name?.haserror}\\\">\\n      <div *ngIf=\\\"!apiValidatedErrors.name?.haserror else nameError\\\" class=\\\"invalid-feedback\\\">Team name required !</div>\\n      <ng-template #nameError>\\n        <div *ngFor=\\\"let err of apiValidatedErrors.name.errors\\\" class=\\\"invalid-feedback\\\"> {{err}}</div>\\n      </ng-template>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <div class=\\\"form-label\\\">Users</div>\\n      <ng-select [items]=\\\"usersList | objIterator\\\" formControlName=\\\"users\\\" bindLabel=\\\"name\\\" bindValue=\\\"id\\\" [multiple]=\\\"true\\\" placeholder=\\\"Select users\\\"></ng-select>\\n    </div>\\n    <div class=\\\"form-group mb-0\\\">\\n      <label class=\\\"form-label\\\">Description</label>\\n      <textarea rows=\\\"3\\\" class=\\\"form-control\\\" formControlName=\\\"description\\\" placeholder=\\\"Description\\\"></textarea>\\n    </div>\\n  </div>\\n  <div class=\\\"card-footer text-right\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"cancelForm()\\\">Cancel</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary ml-2\\\" [disabled]=\\\"!dataForm.valid\\\">Submit</button>\\n  </div>\\n</form>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\n\n@Component({\n  selector: 'app-team-edit',\n  templateUrl: './team-edit.component.html',\n  styleUrls: ['./team-edit.component.scss']\n})\nexport class TeamEditComponent implements OnInit {\n\n  @Input() project: any;\n  @Input() team: any;\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  public usersList = [];\n  private endPoint: string;\n  public dataLoaded = false;\n  public apiValidatedErrors: any = {};\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.initForm();\n    this.getAllUsers();\n    let teamDetailsEndpoint = this.endPoint + '/' + this.project.id + '/teams/' + this.team.id;\n    this.http.get(teamDetailsEndpoint).subscribe(\n      res => {\n        let teamData = res['data'];\n        this.dataForm.patchValue(teamData);\n        this.dataLoaded = true;\n      },\n      err => {\n        console.log(err);\n        this.cancelForm();\n      }\n    );\n  }\n\n  /**\n   * Init projet team form\n   *\n   * @param data\n   */\n  private initForm(data: any = {}) {\n    this.dataForm = this.formBuilder.group(\n      {\n        name: ['', [<any>Validators.required]],\n        description: [''],\n        users: new FormControl()\n      }\n    );\n  }\n\n  /**\n   * Get all resources\n   */\n  private getAllUsers() {\n    let resourcesListEndPoint = BASE_URL + ApplicationConstant.RESOURCES + '?filter=all';\n    this.http.get(resourcesListEndPoint).subscribe(\n      res => {\n        this.usersList = res['data'];\n      }\n    );\n  }\n\n  /**\n   * Submit data\n   *\n   * @param dataForm\n   */\n  public submit(dataForm) {\n    let endpoint = this.endPoint + '/' + this.project.id + '/teams/' + this.team.id;\n    this.http.post(endpoint, dataForm.value).subscribe(\n      res => {\n        this.formResult.emit(res);\n      }, err => {\n        let apiErrors = err['error']['errors'];\n        for (let errs in apiErrors) {\n          if (errs !== undefined) {\n            this.apiValidatedErrors[errs] = { haserror: true, errors: apiErrors[errs] };\n          }\n        }\n      });\n  }\n\n  /**\n   * Close modal\n   */\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n}\n","module.exports = \"<div class=\\\"card mb-0\\\" *ngIf=\\\"dataLoaded\\\">\\n  <div class=\\\"card-header\\\">\\n    <h3 class=\\\"card-title\\\">{{ team.name }}</h3>\\n    <div class=\\\"card-options\\\">\\n      <button class=\\\"btn btn-secondary btn-sm\\\" type=\\\"button\\\" (click)=\\\"cancelForm()\\\">\\n        <i class=\\\"fe fe-x\\\"></i>\\n      </button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    <div class=\\\"alert alert-secondary\\\" *ngIf=\\\"team.description\\\">{{ team.description }}</div>\\n    <div class=\\\"table-responsive\\\">\\n      <table class=\\\"table table-sm\\\">\\n        <thead>\\n          <tr>\\n            <th colspan=\\\"3\\\">\\n              <h4 class=\\\"mb-0\\\">Team Members</h4>\\n            </th>\\n          </tr>\\n          <tr>\\n            <th width=\\\"5%\\\">#</th>\\n            <th>Name</th>\\n            <th width=\\\"10%\\\">Actions</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let item of team.users ;let i= index\\\">\\n            <td>{{ i + 1 }}</td>\\n            <td>{{ usersList[item].name }}</td>\\n            <td>\\n              <a class=\\\"icon ml-2\\\" href=\\\"javascript:void(0)\\\" (click)=\\\"deleteTeamMember(item)\\\">\\n                <i class=\\\"fe fe-trash\\\"></i>\\n              </a>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder} from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BASE_URL, ApplicationConstant } from '../../../../shared/constants/constant';\n\n@Component({\n  selector: 'app-team-view',\n  templateUrl: './team-view.component.html',\n  styleUrls: ['./team-view.component.scss']\n})\nexport class TeamViewComponent implements OnInit {\n\n  @Input() project: any;\n  @Input() team: any;\n  @Output() formResult: EventEmitter<any> = new EventEmitter<any>();\n\n  public dataForm: FormGroup;\n  public usersList = [];\n  private endPoint: string;\n  public dataLoaded = false;\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {\n    this.endPoint = BASE_URL + ApplicationConstant.PROJECTS;\n  }\n\n  ngOnInit() {\n    this.getAllUsers();\n    this.getTeamDetails();\n  }\n\n  /**\n   * Get current team details\n   */\n  private getTeamDetails() {\n    let teamDetailsEndpoint = this.endPoint + '/' + this.project.id + '/teams/' + this.team.id;\n    this.http.get(teamDetailsEndpoint).subscribe(\n      res => {\n        this.team = res['data'];\n        this.dataLoaded = true;\n      },\n      err => {\n        this.cancelForm();\n      }\n    );\n  }\n\n  /**\n   * Get all resources\n   */\n  private getAllUsers() {\n    let resourcesListEndPoint = BASE_URL + ApplicationConstant.RESOURCES + '?filter=all';\n    this.http.get(resourcesListEndPoint).subscribe(\n      res => {\n        this.usersList = res['data'];\n      }\n    );\n  }\n\n  /**\n   * Close modal\n   */\n  public cancelForm() {\n    let emitData = { canceled: true };\n    this.formResult.emit(emitData);\n  }\n\n  /**\n   * Delete team member\n   *\n   * @param user - ID of the user to be removed.\n   */\n  public deleteTeamMember(user) {\n    let deleteTeamMemberEndPoint = this.endPoint + '/' + this.project.id + '/teams/' + this.team.id + '/members';\n    let postObject = {\n      params: { users: [user] }\n    };\n    this.http.delete(deleteTeamMemberEndPoint, postObject).subscribe(\n      res => {\n        this.getTeamDetails();\n      });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModalModule } from 'ngx-bootstrap';\nimport { AppInterceptor } from '../../shared/http/interceptor/interceptor';\nimport { ProjectsRouting } from './projects.routing';\nimport { SharedServicesAndComponentsModule\n} from '../../shared/shared-services-and-components-module/shared-services-and-components-module';\nimport { ProjectsListComponent } from './components/projects.list.component';\nimport { ProjectAddComponent } from './components/project-add/project.add.component';\nimport { ProjectEditComponent } from './components/project-edit/project.edit.component';\nimport { ProjectsService } from './projects.service';\nimport { BsDatepickerModule } from 'ngx-bootstrap';\nimport { ProjectDetailComponent } from './components/project-detail/project-detail.component';\nimport { TeamAddComponent } from './components/team-add/team-add.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { TeamEditComponent } from './components/team-edit/team-edit.component';\nimport { TeamViewComponent } from './components/team-view/team-view.component';\nimport { IterationAddComponent } from './components/iteration-add/iteration-add.component';\nimport { IterationEditComponent } from './components/iteration-edit/iteration-edit.component';\nimport { IterationViewComponent } from './components/iteration-view/iteration-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    ModalModule.forRoot(),\n    ProjectsRouting,\n    SharedServicesAndComponentsModule,\n    BsDatepickerModule.forRoot(),\n    NgSelectModule\n  ],\n  declarations: [\n    ProjectsListComponent,\n    ProjectAddComponent,\n    ProjectEditComponent,\n    ProjectDetailComponent,\n    TeamAddComponent,\n    TeamEditComponent,\n    TeamViewComponent,\n    IterationAddComponent,\n    IterationEditComponent,\n    IterationViewComponent\n  ],\n  entryComponents: [\n    ProjectAddComponent,\n    ProjectEditComponent,\n    TeamAddComponent,\n    TeamEditComponent,\n    TeamViewComponent,\n    IterationAddComponent,\n    IterationEditComponent,\n    IterationViewComponent\n  ],\n  exports: [\n    CommonModule,\n    ProjectAddComponent\n  ],\n  providers: [\n    HttpClient,\n    { provide: HTTP_INTERCEPTORS, useClass: AppInterceptor, multi: true },\n    ProjectsService\n  ]\n})\nexport class ProjectsModule { }\n","\nimport { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProjectsListComponent } from './components/projects.list.component';\nimport { ProjectDetailComponent } from './components/project-detail/project-detail.component';\n\nconst routes: Routes = [\n    { path: '', component: ProjectsListComponent },\n    { path: ':id', component: ProjectDetailComponent },    \n];\n\nexport const ProjectsRouting: ModuleWithProviders = RouterModule.forChild(routes);\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\n\n@Injectable()\nexport class ProjectsService {\n\n  constructor() { }\n\n}\n"],"sourceRoot":""}