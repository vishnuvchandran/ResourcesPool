{"version":3,"sources":["webpack:///./src/app/public/components/forgot-password/forgot-password.component.html","webpack:///./src/app/public/components/forgot-password/forgot-password.component.scss","webpack:///./src/app/public/components/forgot-password/forgot-password.component.ts","webpack:///./src/app/public/components/login/login.component.html","webpack:///./src/app/public/components/login/login.component.scss","webpack:///./src/app/public/components/login/login.component.ts","webpack:///./src/app/public/components/reset-password/reset-password.component.html","webpack:///./src/app/public/components/reset-password/reset-password.component.scss","webpack:///./src/app/public/components/reset-password/reset-password.component.ts","webpack:///./src/app/public/public.component.html","webpack:///./src/app/public/public.component.scss","webpack:///./src/app/public/public.component.ts","webpack:///./src/app/public/public.module.ts","webpack:///./src/app/public/public.routing.ts"],"names":[],"mappings":"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","file":"public-public-module.js","sourcesContent":["module.exports = \"<div class=\\\"page\\\">\\n  <div class=\\\"page-single\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col col-login mx-auto\\\">\\n          <div class=\\\"text-center mb-6\\\">\\n            <img src=\\\"https://www.pitsolutions.ch/fileadmin/themes/templates/images/PITS-Logo.svg\\\" class=\\\"h-6\\\" alt=\\\"\\\">\\n          </div>\\n          <form class=\\\"card forgot-password\\\" [formGroup]=\\\"forgotPasswordForm\\\" novalidate (ngSubmit)=\\\"forgotPassword(forgotPasswordForm)\\\">\\n            <div class=\\\"card-body p-6\\\">\\n              <div class=\\\"card-title text-center\\\">Forgot Password</div>\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"form-label\\\">Email address</label>\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"username\\\" placeholder=\\\"Enter email\\\" [ngClass]=\\\"{'is-invalid':apiValidatedErrors.hasOwnProperty('email')}\\\">\\n                <ng-container *ngIf=\\\"apiValidatedErrors.hasOwnProperty('email')\\\">                  \\n                  <div *ngFor=\\\"let err of apiValidatedErrors.email.errors\\\" class=\\\"invalid-feedback\\\">{{err}}</div>\\n                </ng-container>\\n              </div>\\n              <div class=\\\"form-footer\\\">\\n                <button type=\\\"submit\\\" [disabled]=\\\"!forgotPasswordForm.valid\\\" class=\\\"btn btn-primary btn-block\\\">Submit</button>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<app-informationdialog (confirmed)=\\\"onConfirm()\\\" #informationDialog></app-informationdialog>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport {\n  ValidatorService\n} from '../../../shared/shared-services-and-components-module/services/validators.service';\nimport { BASE_URL, ApplicationConstant } from '../../../shared/constants/constant';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  @ViewChild('informationDialog') private informationDialog;\n  public forgotPasswordForm: FormGroup;\n  public apiValidatedErrors = {};\n\n  constructor(private formBuilder: FormBuilder,\n    private router: Router,\n    private validator: ValidatorService,\n    private http: HttpClient) { }\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.initForgotPasswordForm();\n  }\n\n  initForgotPasswordForm() {\n    return this.formBuilder.group({\n      username: ['', [<any>Validators.required, this.validator.validateEmail]]\n    });\n  }\n\n  public forgotPassword(form) {\n    this.submit(form);\n  }\n\n  submit(form) {\n    let params = {\n      'email': form.value.username,\n    };\n    let endPoint = BASE_URL + ApplicationConstant.FORGOT_PASSWORD;\n    let parentContext = this;\n    return this.http.post(endPoint, params).toPromise().then(\n      function (data) {\n        parentContext.informationDialog.presentInformationWindow(data['message']);\n        return data;\n      }\n    ).catch(\n      function (err) {\n        let apiErrors = err['error']['errors'];\n        for (let errs in apiErrors) {\n          if (errs !== undefined) {\n            console.log(parentContext.apiValidatedErrors);\n            parentContext.apiValidatedErrors[errs] = { haserror: true, errors: apiErrors[errs] };\n          }\n        }\n        console.log(parentContext.apiValidatedErrors);\n      }\n    );\n  }\n\n  /**\n   * onConfirm\n   */\n  onConfirm() {\n    location.href = '/user/login';\n  }\n}\n","module.exports = \"<div class=\\\"page\\\">\\n  <div class=\\\"\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-login mx-auto\\\">\\n          <div class=\\\"text-center mb-6\\\">\\n            <img src=\\\"https://www.pitsolutions.ch/fileadmin/themes/templates/images/PITS-Logo.svg\\\" class=\\\"h-6\\\" alt=\\\"\\\">\\n          </div>\\n          <form class=\\\"card\\\" [formGroup]=\\\"loginForm\\\" novalidate (ngSubmit)=\\\"login(loginForm)\\\">\\n            <div class=\\\"card-body p-6\\\">\\n              <div class=\\\"card-title\\\">Login to your account</div>\\n              <div class=\\\"form-group\\\">\\n                <div *ngIf=\\\"loginFailedError\\\" class=\\\"alert alert-danger\\\">\\n                    Login failed due to bad credentials\\n                </div>\\n                <label class=\\\"form-label\\\">Email address</label>\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"username\\\" placeholder=\\\"Enter email\\\">\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"form-label\\\">\\n                  Password\\n                  <a [routerLink]=\\\"['/user/forgot-password']\\\" class=\\\"float-right small\\\">I forgot password</a>\\n                </label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\">\\n              </div>\\n              <div class=\\\"form-footer\\\">\\n                <button type=\\\"submit\\\" [disabled]=\\\"!loginForm.valid\\\" class=\\\"btn btn-primary btn-block\\\">Sign in</button>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \".col-login {\\n  width: 385px; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationConstant } from '../../../shared/constants/constant';\nimport { Auth } from '../../../shared/auth/auth';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  public loginForm: FormGroup;\n  public loginFailedError;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private auth: Auth\n  ) { }\n\n  ngOnInit() {\n    this.loginForm = this.initLoginForm();\n  }\n\n  initLoginForm() {\n    return this.formBuilder.group({\n      username: ['', [<any>Validators.required]],\n      password: ['', [<any>Validators.required]]\n    });\n  }\n\n  public login(form) {\n    let parentContext = this;\n    this.auth.login(form.value).then(\n      function (data) {\n        if (data.access_token !== undefined) {\n          window.location.href = '/home';\n        } else {\n          parentContext.loginFailedError = true;\n        }\n      }\n    );\n  }\n\n}\n","module.exports = \"<div class=\\\"page\\\">\\n  <div class=\\\"page-single\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col col-login mx-auto\\\">\\n          <div class=\\\"text-center mb-6\\\">\\n            <img src=\\\"https://www.pitsolutions.ch/fileadmin/themes/templates/images/PITS-Logo.svg\\\" class=\\\"h-6\\\" alt=\\\"\\\">\\n          </div>\\n          <form class=\\\"card reset-password\\\" [formGroup]=\\\"resetPasswordForm\\\" novalidate (ngSubmit)=\\\"resetPassword(resetPasswordForm)\\\">\\n            <div class=\\\"card-body p-6\\\">\\n              <div class=\\\"card-title text-center\\\">Reset Password</div>\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"form-label\\\">Email\\n                  <span class=\\\"form-required\\\">*</span>\\n                </label>\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"User Email\\\">\\n                <label class=\\\"form-label\\\">New Password\\n                  <span class=\\\"form-required\\\">*</span>\\n                </label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"newPassword\\\" placeholder=\\\"New Password\\\">\\n                <label class=\\\"form-label\\\">Confirm Password\\n                  <span class=\\\"form-required\\\">*</span>\\n                </label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\">\\n              </div>\\n              <div class=\\\"form-footer\\\">\\n                <button type=\\\"submit\\\" [disabled]=\\\"!resetPasswordForm.valid\\\" class=\\\"btn btn-primary btn-block\\\">Submit</button>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<app-informationdialog (confirmed)=\\\"onConfirm()\\\" #informationDialog></app-informationdialog>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {\n  ValidatorService\n} from '../../../shared/shared-services-and-components-module/services/validators.service';\nimport { BASE_URL, ApplicationConstant } from '../../../shared/constants/constant';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  @ViewChild('informationDialog') private informationDialog;\n  public resetPasswordForm: FormGroup;\n  private token: String;\n  constructor(private formBuilder: FormBuilder,\n    private router: Router,\n    private validator: ValidatorService,\n    private http: HttpClient,\n    private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.resetPasswordForm = this.initResetPasswordForm();\n    this.activatedRoute.params.subscribe(res => {\n      this.token = res.token;\n    });\n  }\n\n  initResetPasswordForm() {\n    return this.formBuilder.group({\n      newPassword: ['', [<any>Validators.required]],\n      confirmPassword: ['', [<any>Validators.required]],\n      email: ['', [<any>Validators.required, this.validator.validateEmail]],\n    });\n  }\n\n  /**\n   * function resetPassword\n   * @param form\n   */\n  public resetPassword(form) {\n    this.submit(form);\n  }\n\n  /**\n   * function submit\n   * @param form\n   */\n  protected submit(form) {\n    let params = {\n      'email': form.value.email,\n      'token': this.token,\n      'password': form.value.newPassword,\n      'password_confirmation': form.value.confirmPassword,\n    };\n    let endPoint = BASE_URL + ApplicationConstant.RESET_PASSWORD;\n    let parentContext = this;\n    return this.http.post(endPoint, params).toPromise().then(\n      function (data) {\n        parentContext.informationDialog.presentInformationWindow(data['message']);\n        return data;\n      }\n    ).catch(\n      function (err) {\n        console.log(err);\n        return false;\n      }\n    );\n  }\n\n  /**\n   * onConfirm\n   */\n  public onConfirm() {\n    location.href = '/user/login';\n  }\n}\n","module.exports = \"<router-outlet></router-outlet>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-public',\n  templateUrl: './public.component.html',\n  styleUrls: ['./public.component.scss']\n})\nexport class PublicComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { PublicComponent } from './public.component';\nimport { PublicRouting } from './public.routing';\nimport { LoginComponent } from './components/login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Auth } from '../shared/auth/auth';\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\nimport { SharedServicesAndComponentsModule } from \"../shared/shared-services-and-components-module/shared-services-and-components-module\";\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    PublicRouting,\n    SharedServicesAndComponentsModule\n  ],\n  providers: [\n    HttpClient,\n    Auth\n  ],\n  declarations: [\n    PublicComponent,\n    LoginComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent\n  ]\n})\nexport class PublicModule { }\n","\nimport { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PublicComponent } from './public.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\n\n\nconst routes: Routes = [\n  {\n    path: '', component: PublicComponent,\n    children: [\n      {\n        path: 'login', component: LoginComponent,\n      },\n      { path: 'forgot-password', component: ForgotPasswordComponent },\n      { path: 'forgot-password/:token', component: ResetPasswordComponent },\n      { path: '', redirectTo: 'login', pathMatch: 'full' }\n    ]\n  }\n];\n\nexport const PublicRouting: ModuleWithProviders = RouterModule.forChild(routes);\n"],"sourceRoot":""}